<template>
    <div id="SIMPLE"></div>
    <div id="STATIC_VAR" --width="10px"></div>

    <div id="DYNAMIC_VAR" --width="{*value}px" :click="|_, _| *value += 1"></div>

    <div class="DUPLICATE" id="PARENT"></div>
    <component src="super::styling_sub" --width="10px"></component>
</template>

<style>
#SIMPLE {
    width: 10px;
}

#STATIC_VAR {
    width: var(--width);
}

#DYNAMIC_VAR {
    width: var(--width);
}

.DUPLICATE {
    width: 10px;
}
</style>

<data>
let mut value: u8 = 10;
</data>

<define>
#[cfg(test)]
mod testsÂ {
    use wasm_bindgen_test::*;
    use crate::test_utils::{html, setup};

    wasm_bindgen_test_configure!(run_in_browser);

    fn get_style(element: &web_sys::Element) -> web_sys::CssStyleDeclaration {
        let window = web_sys::window().unwrap();
        window.get_computed_style(element).unwrap().unwrap()
    }

    #[wasm_bindgen_test]
    fn simple() {
        let document = setup::<super::Component>();
        let tag = document.get_element_by_id("SIMPLE").unwrap();

        assert_eq!(get_style(&tag).get_property_value("width").unwrap(), "10px");
    }

    #[wasm_bindgen_test]
    fn static_var() {
        let document = setup::<super::Component>();
        let tag = document.get_element_by_id("STATIC_VAR").unwrap();

        assert_eq!(get_style(&tag).get_property_value("width").unwrap(), "10px");
    }

    #[wasm_bindgen_test]
    fn dynamic_var() {
        let document = setup::<super::Component>();
        let button = html(document.get_element_by_id("DYNAMIC_VAR").unwrap());

        assert_eq!(get_style(&button).get_property_value("width").unwrap(), "10px");
        button.click();
        assert_eq!(get_style(&button).get_property_value("width").unwrap(), "11px");
        button.click();
        assert_eq!(get_style(&button).get_property_value("width").unwrap(), "12px");
    }

    #[wasm_bindgen_test]
    fn test_scope() {
        let document = setup::<super::Component>();
        let parent = document.get_element_by_id("PARENT").unwrap();
        let child = document.get_element_by_id("CHILD").unwrap();

        assert_eq!(get_style(&parent).get_property_value("width").unwrap(), "10px");
        assert_ne!(get_style(&child).get_property_value("width").unwrap(), "10px");

        assert_ne!(get_style(&parent).get_property_value("height").unwrap(), "20px");
        assert_eq!(get_style(&child).get_property_value("height").unwrap(), "20px");
    } 

    #[wasm_bindgen_test]
    fn var_from_parent() {
        let document = setup::<super::Component>();
        let tag = document.get_element_by_id("CHILD_VAR").unwrap();

        assert_eq!(get_style(&tag).get_property_value("width").unwrap(), "10px");
    }
}
</define>

<template>
    <input id="BUTTON" type="checkbox" :click="|_, element| *value = element.checked()" />

    <div $if="*value" id="SIMPLE">SIMPLE</div>
    <div $if="*value" id="IREC">{2 + 2}</div>
    <div $if="*value" id="AREC" =attr="10"></div>
    <div $if="*value" id="SE">
        <button id="SE_BUTTON" :click="|_, element| *event_value += 1">{event_value}</button>
    </div>
    <div $if="*value" id="E" :click="|_, element| *event_value += 1">{event_value}</div>
</template>

<data>
let mut value: bool = false;
let mut event_value: u32 = 0;
</data>

<define>
#[cfg(test)]
pub mod tests {
    use wasm_bindgen_test::*;
    use crate::test_utils::{html, setup};

    wasm_bindgen_test_configure!(run_in_browser);

    #[wasm_bindgen_test]
    fn simple() {
        let document = setup::<super::Component>();
        let button = html(document.get_element_by_id("BUTTON").unwrap());

        assert!(document.get_element_by_id("SIMPLE").is_none(), "Element should not exsist");
        button.click();
        assert_eq!(html(document.get_element_by_id("SIMPLE").unwrap()).text_content().unwrap(), "SIMPLE");
        button.click();
        assert!(document.get_element_by_id("SIMPLE").is_none(), "Element should not exsist");
    }

    #[wasm_bindgen_test]
    fn reactive_text() {
        let document = setup::<super::Component>();
        let button = html(document.get_element_by_id("BUTTON").unwrap());

        button.click();
        assert_eq!(html(document.get_element_by_id("IREC").unwrap()).text_content().unwrap(), "4");
    }
    
    #[wasm_bindgen_test]
    fn reactive_attribute_on_conditional_element() {
        let document = setup::<super::Component>();
        let button = html(document.get_element_by_id("BUTTON").unwrap());

        button.click();
        assert_eq!(html(document.get_element_by_id("AREC").unwrap()).get_attribute("attr"), Some("10".to_owned()));
    }

    #[wasm_bindgen_test]
    fn event_on_sub_tag() {
        let document = setup::<super::Component>();
        let button = html(document.get_element_by_id("BUTTON").unwrap());

        button.click();
        let div = html(document.get_element_by_id("SE_BUTTON").unwrap());
        assert_eq!(div.text_content().unwrap().trim(), "0");
        div.click();
        assert_eq!(div.text_content().unwrap().trim(), "1");
    }

    #[wasm_bindgen_test]
    fn event_on_conditional_element() {
        let document = setup::<super::Component>();
        let button = html(document.get_element_by_id("BUTTON").unwrap());

        button.click();
        let div = html(document.get_element_by_id("E").unwrap());
        assert_eq!(div.text_content().unwrap().trim(), "0");
        div.click();
        assert_eq!(div.text_content().unwrap().trim(), "1");
    }
}
</define>

